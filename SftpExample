Si tu veux int√©grer cette solution dans une application Spring Boot et r√©cup√©rer les informations sensibles (cl√© priv√©e, mot de passe et passphrase) depuis Vault, voici comment proc√©der.


---

üìå √âtapes :

1. Configurer Vault pour stocker les secrets


2. Utiliser Spring Cloud Vault pour r√©cup√©rer ces secrets


3. Adapter le code SFTP pour utiliser les valeurs de Vault




---

‚úÖ 1. Configurer Vault (Exemple en CLI)

Stocke les informations SFTP dans Vault :

vault kv put secret/sftp privateKey=@/chemin/vers/id_rsa passphrase="maPassPhrase" username="user" host="sftp.example.com"

Explication :

privateKey=@/chemin/vers/id_rsa ‚Üí Charge la cl√© priv√©e depuis un fichier

passphrase="maPassPhrase" ‚Üí Stocke la passphrase

username="user" ‚Üí Nom d'utilisateur

host="sftp.example.com" ‚Üí Adresse du serveur



---

‚úÖ 2. Configurer Spring Boot pour se connecter √† Vault

Ajoute Spring Cloud Vault dans pom.xml :

<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-vault-config</artifactId>
</dependency>

Puis, configure application.properties :

spring.cloud.vault.uri=http://localhost:8200  # URL de Vault
spring.cloud.vault.token=00000000-0000-0000-0000-000000000000  # Ton token Vault
spring.cloud.vault.kv.enabled=true
spring.cloud.vault.kv.application-name=sftp


---

‚úÖ 3. Cr√©er une classe de configuration pour SFTP

Dans Spring Boot, utilise @Value pour injecter les secrets depuis Vault.

import com.jcraft.jsch.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.FileInputStream;
import java.util.Properties;

@Service
public class SFTPService {

    @Value("${sftp.host}")
    private String host;

    @Value("${sftp.username}")
    private String username;

    @Value("${sftp.privateKey}")
    private String privateKey;

    @Value("${sftp.passphrase}")
    private String passphrase;

    @Value("${sftp.remoteDir}")
    private String remoteDir;

    public void uploadFile(String localFile) {
        Session session = null;
        ChannelSftp channelSftp = null;

        try {
            // Initialisation de JSch
            JSch jsch = new JSch();
            jsch.addIdentity(privateKey, passphrase); // Utilisation de la cl√© priv√©e avec passphrase

            // Connexion SSH
            session = jsch.getSession(username, host, 22);

            // D√©sactiver la v√©rification stricte de l'h√¥te
            Properties config = new Properties();
            config.put("StrictHostKeyChecking", "no");
            session.setConfig(config);

            // Connexion au serveur
            session.connect();
            System.out.println("Connexion r√©ussie √† " + host);

            // Ouverture du canal SFTP
            channelSftp = (ChannelSftp) session.openChannel("sftp");
            channelSftp.connect();
            System.out.println("Canal SFTP ouvert");

            // Envoi du fichier
            File file = new File(localFile);
            channelSftp.put(new FileInputStream(file), remoteDir + file.getName());
            System.out.println("Fichier envoy√© avec succ√®s: " + file.getName());

        } catch (JSchException | SftpException | java.io.FileNotFoundException e) {
            e.printStackTrace();
        } finally {
            // Fermeture des connexions
            if (channelSftp != null) channelSftp.disconnect();
            if (session != null) session.disconnect();
            System.out.println("Connexion ferm√©e");
        }
    }
}


---

‚úÖ 4. Utiliser le Service dans un Controller

Ajoute un REST Controller pour d√©clencher l'upload :

import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/sftp")
public class SFTPController {

    private final SFTPService sftpService;

    public SFTPController(SFTPService sftpService) {
        this.sftpService = sftpService;
    }

    @PostMapping("/upload")
    public String uploadFile(@RequestParam String filePath) {
        sftpService.uploadFile(filePath);
        return "Fichier envoy√© avec succ√®s";
    }
}


---

üìå Test

Lance l‚Äôapplication et fais un test via Postman :

POST http://localhost:8080/sftp/upload?filePath=/chemin/local/fichier.txt


---

‚úÖ R√©sum√© :

‚úî Vault stocke les secrets (cl√© priv√©e, passphrase, etc.)
‚úî Spring Boot r√©cup√®re ces valeurs automatiquement
‚úî JSch utilise ces secrets pour se connecter en SFTP avec cl√© priv√©e
‚úî Un service Spring Boot expose un endpoint API pour envoyer un fichier

√áa devrait marcher parfaitement. Essaye et dis-moi si besoin d‚Äôajustements üöÄ

